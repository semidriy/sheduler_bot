import asyncio
from datetime import datetime
from aiogram import F, Bot, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from collections import defaultdict

from config_data.config import Config, load_config
from functions.db_handler import get_subadmin_user_id
from is_admin.isadmin import IsAdmin
from keyboards.admin_kb import mailing_menu, mailing_admin_menu, button_back_to_admin
from state_fsm.fsm import AdminState, ScheduleStates
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

config: Config = load_config()
bot = Bot(
        token=config.tg_bot.token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

mailing_list = types.InlineKeyboardMarkup(inline_keyboard=mailing_menu)
mailing_admin_menu = types.InlineKeyboardMarkup(inline_keyboard=mailing_admin_menu)
admin_keyboard_main = types.InlineKeyboardMarkup(inline_keyboard=button_back_to_admin)

router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
scheduled_messages = defaultdict(list)

##  –ü–æ–¥–º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == 'news', IsAdmin())
async def admin_hello_message(query: types.CallbackQuery):
    await query.message.edit_text('–î–ª—è –∫–æ–≥–æ –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É? üëÄ', reply_markup=mailing_list)

@router.callback_query(F.data == 'admin_news', IsAdmin())
async def admin_news_get(query: types.CallbackQuery):
     await query.message.edit_text('üë§ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', reply_markup=mailing_admin_menu)

##  –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ê–¥–º–∏–Ω–∞–º 2 –≥—Ä—É–ø–ø—ã 
@router.callback_query(F.data == 'create_waiting_first', IsAdmin())
async def admin_news_get(query: types.CallbackQuery, state: FSMContext, bot: Bot):
    await query.message.edit_text('üëÄ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º ‚ö†Ô∏è\n\n' \
                                  '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="news")]]))
    
    await state.set_state(ScheduleStates.waiting_for_admin_news_first)

@router.message(ScheduleStates.waiting_for_admin_news_first)
async def schedule_message(message: types.Message, state: FSMContext):
    await state.set_state(ScheduleStates.waiting_date_for_admin_first)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ FSM
    message_data = {
        'text': message.html_text if message.text else (message.caption if message.caption else ""),
        'photo': message.photo[-1].file_id if message.photo else None,
        'video': message.video.file_id if message.video else None,
        'reply_markup': message.reply_markup.model_dump_json() if message.reply_markup else None
    }
    
    await state.update_data(message_data=message_data)
    await message.answer("‚è≥ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß –ú–ú –î–î –ú–ú\n(—á–∞—Å—ã –º–∏–Ω—É—Ç—ã –¥–µ–Ω—å –º–µ—Å—è—Ü, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12 00 31 12)\n\n" \
                                  '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="news")]]))

@router.message(ScheduleStates.waiting_date_for_admin_first)
async def process_schedule_time(message: types.Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        hour, minute, day, month = map(int, message.text.split())
        
        now = datetime.now()
        schedule_time = datetime(now.year, month, day, hour, minute)
        
        if schedule_time < now:
            schedule_time = datetime(now.year + 1, month, day, hour, minute)
            if schedule_time < now:
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞! –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ.")
                return
            
        data = await state.get_data()
        message_data = data.get('message_data')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        message_id = f"{message.from_user.id}_{datetime.now().timestamp()}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö
        scheduled_messages[message.from_user.id].append({
            'id': message_id,
            'message': message_data,
            'time': schedule_time,
            'users': await get_subadmin_user_id()
        })
        
        await message.answer(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}\n",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="create_waiting_first")],
                [types.InlineKeyboardButton(text="üìù –ú–æ–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞–º", callback_data="list_scheduled_admins")],
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_news")]
            ]
            )
        )
        await state.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        asyncio.create_task(send_scheduled_message(message.from_user.id, message_id, schedule_time))  
    except ValueError as e:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î –ú–ú –ß–ß –ú–ú")
async def send_scheduled_message(user_id: int, message_id: str, schedule_time: datetime):
    now = datetime.now()
    delay = (schedule_time - now).total_seconds()
    
    if delay > 0:
        await asyncio.sleep(delay)
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        for msg in scheduled_messages.get(user_id, []):
            if msg['id'] == message_id:
                message_data = msg['message']
                users = msg['users']
                i = 0
                
                for user in users:
                    try:
                        reply_markup = None
                        if message_data['reply_markup']:
                            reply_markup = types.InlineKeyboardMarkup.model_validate_json(message_data['reply_markup'])

                        if message_data['video']:
                            await bot.send_video(
                                chat_id=user,
                                video=message_data['video'],
                                caption=message_data['text'] if message_data['text'] else None,
                                reply_markup=reply_markup,
                                parse_mode="HTML"
                            )
                        elif message_data['photo']:
                            await bot.send_photo(
                                chat_id=user,
                                photo=message_data['photo'],
                                caption=message_data['text'] if message_data['text'] else None,
                                reply_markup=reply_markup,
                                parse_mode="HTML"
                            )
                        else:
                            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await bot.send_message(
                                chat_id=user,
                                text=message_data['text'],
                                reply_markup=reply_markup,
                                parse_mode="HTML"
                            )
                        i += 1
                        await asyncio.sleep(0.3)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user}: {e}")
                
                count_user_access = len(users)
                await bot.send_message(
                    user_id,
                    f'üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n'
                    f'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_user_access}\n'
                    f'‚úÖ –£–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {i}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {count_user_access - i}',
                    reply_markup=admin_keyboard_main
                )
                
                # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                scheduled_messages[user_id] = [m for m in scheduled_messages[user_id] if m['id'] != message_id]
                break

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(F.data == "list_scheduled_admins", IsAdmin())
async def list_scheduled_messages(query: types.CallbackQuery):
    messages = scheduled_messages.get(query.from_user.id, [])
    
    if not messages:
        await query.message.edit_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="news")]])
        )
        return
    
    text = "üìÖ <b>–í–∞—à–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤üë§:</b>\n\n"
    for msg in messages:
        
        text += (
            f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n" 
            f"{msg['time'].strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n"
            f"{msg['message']['text']}\n"
            "#############################\n"
        )

    await query.message.edit_text(
        text,
        disable_web_page_preview=True,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_scheduled_menu")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="news")]
        ]
        )
    )

# –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(F.data == "delete_scheduled_menu", IsAdmin())
async def delete_scheduled_menu(query: types.CallbackQuery):
    messages = scheduled_messages.get(query.from_user.id, [])
    
    if not messages:
        await query.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    buttons = []
    for msg in messages:
        buttons.append([
            types.InlineKeyboardButton(
                text=f"–£–¥–∞–ª–∏—Ç—å {msg['time'].strftime('%d.%m.%Y %H:%M')}",
                callback_data=f"delete_scheduled_admins_{msg['id']}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω–µ—Ü
    buttons.append([
        types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="list_scheduled_admins"
        )
    ])  
    
    await query.message.edit_text(
        "üëÄ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_scheduled_admins_"), IsAdmin())
async def delete_scheduled_message(query: types.CallbackQuery):
    message_id = query.data.split("_")[-1]
    user_id = query.from_user.id
    
    if user_id in scheduled_messages:
        initial_count = len(scheduled_messages[user_id])
        scheduled_messages[user_id] = [m for m in scheduled_messages[user_id] if m['id'] != message_id]
        
        if len(scheduled_messages[user_id]) < initial_count:
            await query.message.edit_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ")
        else:
            await query.message.edit_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        await query.message.edit_text("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

# –§—É–Ω–∫—Ü–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
@router.callback_query(F.data == 'send_admin_now', IsAdmin())
async def send_message_immediately(query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.waiting_for_admin_news)
    await query.message.edit_text('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º üë§:')
    
@router.message(AdminState.waiting_for_admin_news)
async def admin_news_message(message: types.Message, state: FSMContext):
    users = await get_subadmin_user_id()
    i = 0
    await state.clear()
     # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
    message_data = {
        'text': message.html_text if message.text else (message.caption if message.caption else ""),
        'photo': message.photo[-1].file_id if message.photo else None,
        'video': message.video.file_id if message.video else None,
        'reply_markup': message.reply_markup.model_dump_json() if message.reply_markup else None
    }
    # print(message_data['reply_markup'])
    for user in users:
            try:
                reply_markup = None
                if message_data['reply_markup']:
                    reply_markup = types.InlineKeyboardMarkup.model_validate_json(message_data['reply_markup'])

                if message_data['video']:
                    await bot.send_video(
                        chat_id=user,
                        video=message_data['video'],
                        caption=message_data['text'] if message_data['text'] else None,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
                elif message_data['photo']:
                    await bot.send_photo(
                        chat_id=user,
                        photo=message_data['photo'],
                        caption=message_data['text'] if message_data['text'] else None,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
                    print(reply_markup)
                else:
                    # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.send_message(
                        chat_id=user,
                        text=message_data['text'],
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
                i += 1
                await asyncio.sleep(0.3)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user}: {e}")
    count_user_access = len(users)
    await message.answer(f'üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n'
                         f'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_user_access}\n'
                         f'‚úÖ –£–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {i}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {count_user_access - i}',
                         reply_markup=admin_keyboard_main
    )