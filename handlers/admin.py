from aiogram.filters import Command
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
# from apscheduler.schedulers.asyncio import AsyncIOScheduler

from keyboards.admin_kb import admin_kb
# from functions.start_message import call_first_start
# from functions.second_start_message import call_second_start
# from functions.last_start_message import call_last_message_start
from is_admin.isadmin import IsAdmin
from keyboards.admin_kb import admin_kb

router = Router()

admin_keyboard_main = types.InlineKeyboardMarkup(inline_keyboard=admin_kb)
# first_message_edit_kb = types.InlineKeyboardMarkup(inline_keyboard=first_massage_edit_kb)
# second_message_edit_kb = types.InlineKeyboardMarkup(inline_keyboard=second_message_edit_kb)
# last_message_edit_kb = types.InlineKeyboardMarkup(inline_keyboard=last_message_edit_kb)
# hello_kb = types.InlineKeyboardMarkup(inline_keyboard=hello_kb)

router = Router()

async def delete_previous_messages(chat_id: int, message_ids: list, bot):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ"""
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

# –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä 
# @router.message(Command('mes'))
# async def message_git(message: types.Message):
#     scheduler = AsyncIOScheduler()

## –õ–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command('admin'), IsAdmin())
async def admin_command(message: types.Message) -> None:
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üôãüèº‚Äç‚ôÇÔ∏è', reply_markup=admin_keyboard_main)

# @router.callback_query(F.data == 'admin_hello_message', IsAdmin())
# async def admin_hello_message(query: types.CallbackQuery):
#     await query.message.edit_text('–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=hello_kb)
 
# ## –û–±—Ä–∞–±–æ—Ç–∫–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏—è
# @router.callback_query(F.data == 'first_message', IsAdmin())
# async def first_hello_message(query: types.CallbackQuery):
#     await query.message.answer('–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:')
#     await call_first_start(query.message)
#     await query.message.answer('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=first_message_edit_kb)

# ## –û–±—Ä–∞–±–æ—Ç–∫–∞ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
# @router.callback_query(F.data == 'second_message', IsAdmin())
# async def first_hello_message(query: types.CallbackQuery):
#     await query.message.answer('–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:')
#     await call_second_start(query.message)
#     await query.message.answer('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=second_message_edit_kb)

# ## –û–±—Ä–∞–±–æ—Ç–∫–∞ –ü–û–°–õ–ï–î–ù–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è
# @router.callback_query(F.data == 'last_message', IsAdmin())
# async def first_hello_message(query: types.CallbackQuery):
#     await query.message.answer('–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:')
#     await call_last_message_start(query.message)
#     await query.message.answer('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=last_message_edit_kb)

## –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
@router.callback_query(F.data == 'back_to_admin')
async def back_admin_menu(query: types.CallbackQuery, state: FSMContext, bot):
    await state.clear()
    await query.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üôãüèº‚Äç‚ôÇÔ∏è', reply_markup=admin_keyboard_main)


# ## –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç–∫–∏
# @router.callback_query(F.data == 'back_to_hello_kb')
# async def back_to_hello_kb(query: types.CallbackQuery, state: FSMContext, bot):
#     await state.clear()
#     await query.message.edit_text('–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=hello_kb)
# ## –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# @router.callback_query(F.data == 'edit_message')
# async def edit_hello_message(query: types.CallbackQuery, state: FSMContext):
#     await query.message.answer('–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ')
#     await state.set_state(AdminState.waiting_for_full_message)
