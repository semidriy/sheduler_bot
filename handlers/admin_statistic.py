import asyncio
from aiogram import types, F, Router
import keyboards.admin_message_kb as kboard
import keyboards.admin_kb as kb

from functions.db_handler import del_groupid_subadmin, get_admin_count_referal, get_admin_current_cashback, get_bounty_cashback
from is_admin.isadmin import IsAdmin
from keyboards.admin_kb import button_back_to_admin_statistic

router = Router()

kb_button_back_to_admin_statistic = types.InlineKeyboardMarkup(inline_keyboard=button_back_to_admin_statistic)

@router.callback_query(F.data == 'admin_stat')
async def admin_process_stat(query: types.CallbackQuery):
    await query.message.edit_text('‚öôÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', reply_markup=await kboard.stat_subadmin_kb())

@router.callback_query(lambda c: c.data and c.data.startswith('statistic_'))
async def edit_message_handler(query: types.CallbackQuery):
    try:
        # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "statistic_" - —ç—Ç–æ username (—Å—Ç—Ä–æ–∫–∞)
        username = query.data[10:]
        #  –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bounty_cashback = await get_bounty_cashback()
        # referal_link = await get_admin_referal_link(username)
        count_referal = await get_admin_count_referal(username)
        count_bounty_cashback = count_referal * bounty_cashback
        current_cashback = await get_admin_current_cashback(username)
        await query.message.edit_text(f'üë§ @{username}\n\n' \
                                    #    f'–ï–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n {referal_link}\n\n'
                                       'üìà –ï–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n'
                                       f'‚îå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {count_referal}\n'
                                       f'‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {count_bounty_cashback}‚ÇΩ\n'
                                       f'‚îî –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {current_cashback}‚ÇΩ', disable_web_page_preview=True, reply_markup=await kb.subadmin_delete_kb(username))
    except Exception as e:
        await query.message.answer(f"admin_statistic.edit_message_handler | –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)
        print(f"admin_statistic.edit_message_handler | –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

@router.callback_query(lambda c: c.data and c.data.startswith('delete_sub_'))
async def process_delete_subadmin(query: types.CallbackQuery):
    try:
        # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "delete_sub_" - —ç—Ç–æ username (—Å—Ç—Ä–æ–∫–∞)
        username = query.data[11:]
        await del_groupid_subadmin(username)
        await query.message.edit_text('üöÆ –°–∞–±-–∞–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω!\n\n' \
                             '‚öôÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', reply_markup=await kboard.stat_subadmin_kb())
    except Exception as e:
        await query.message.answer(f"admin_statistic.process_delete_subadmin | –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", show_alert=True)
        print(f"admin_statistic.process_delete_subadmin | –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")