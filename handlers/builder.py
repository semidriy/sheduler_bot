from aiogram import types, F, Router
from aiogram.types import CallbackQuery
import aiosqlite
import json

from functions.db_handler import call_message_edit, get_capcha_timer, get_privetka_timer
import keyboards.admin_message_kb as kb
from state_fsm.fsm import AdminState
from aiogram.fsm.context import FSMContext
from keyboards.admin_kb import button_back_to_privetka

router = Router()

kb_button_back_to_privetka = types.InlineKeyboardMarkup(inline_keyboard=button_back_to_privetka)

@router.callback_query(F.data == 'admin_hello_message')
async def message_git(query: types.CallbackQuery):
    await query.message.edit_text('‚öôÔ∏è –ú–µ–Ω—é –ø—Ä–∏–≤–µ—Ç–∫–∏', reply_markup=await kb.reply_menu())

##  –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data and c.data.startswith('delete_') and c.data[7:].isdigit())
async def delete_message_handler(callback: CallbackQuery):
    try:
        message_id = int(callback.data[7:])  # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "delete_"
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è...
        connect = await aiosqlite.connect('bot.db')
        cursor = await connect.cursor()
        
        await cursor.execute('DELETE FROM msg_kb WHERE id = ?', (message_id,))
        await connect.commit()
        
        await cursor.close()
        await connect.close()
        
        await callback.message.edit_reply_markup(
            reply_markup=await kb.reply_menu()
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", show_alert=True)



## –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data and c.data.startswith('message_') and c.data[8:].isdigit())
async def edit_message_handler(query: types.CallbackQuery):
    try:
        message_id = int(query.data[8:])
        await query.message.answer(f'–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ {message_id}-–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        msg_data = await call_message_edit(message_id)
        if msg_data['video'] and msg_data['video'] != 'NONE':
            await query.message.answer_video(
                video=msg_data['video'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await query.message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
        elif msg_data['photo'] and msg_data['photo'] != 'NONE':
            await query.message.answer_photo(
                photo=msg_data['photo'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await query.message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)

##  –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞
@router.callback_query(lambda c: c.data and c.data.startswith('edit_media_') and c.data[11].isdigit())
async def edit_message_handler(query: types.CallbackQuery, state: FSMContext):
    message_id = int(query.data[11:])
    await query.message.answer('üèûÔ∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ(–≥–∏—Ñ–∫—É)\n\n' \
                               '‚ö†Ô∏è –ú–æ–∂–µ—à—å —Ç–∞–∫ –∂–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –ø–æ—Å—Ç ,—è —Å–∞–º –∑–∞–±–µ—Ä—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª\n\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.update_data(message_id=message_id)
    await state.set_state(AdminState.fms_message_media)

@router.message(AdminState.fms_message_media)
async def process_media_put(message: types.Message, state: FSMContext):
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    data = await state.get_data()
    message_id = data.get('message_id')
    if message.photo:
        photo_id = message.photo[-1].file_id
        put_photo = await cursor.execute('UPDATE msg_kb SET photo = ? WHERE id=?', (photo_id,message_id,))
        clear_video = await cursor.execute('UPDATE msg_kb SET video = "NONE" WHERE id=?', (message_id,))
        await connect.commit()
        put_photo = await put_photo.fetchone()
        clear_video = await clear_video.fetchone()
    elif message.video:
        video_id = message.video.file_id
        put_video = await cursor.execute('UPDATE msg_kb SET video = ? WHERE id=?', (video_id,message_id))
        clear_photo = await cursor.execute('UPDATE msg_kb SET photo = "NONE" WHERE id=?', (message_id,))
        await connect.commit()
        put_photo = await put_video.fetchone()
        clear_photo = await clear_photo.fetchone()
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞!\n\n' \
                             'üèûÔ∏è –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n\n' \
                             '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await cursor.close()
    await connect.close()
    await message.answer(f'‚úÖ –ú–µ–¥–∏–∞ {message_id}-–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ\n\n')
    await state.clear()
    msg_data = await call_message_edit(message_id)
    try:
        await message.answer(f'–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ {message_id}-–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        msg_data = await call_message_edit(message_id)
        if msg_data['video'] and msg_data['video'] != 'NONE':
            await message.answer_video(
                video=msg_data['video'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
        elif msg_data['photo'] and msg_data['photo'] != 'NONE':
            await message.answer_photo(
                photo=msg_data['photo'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)

##  –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
@router.callback_query(lambda c: c.data and c.data.startswith('edit_text_') and c.data[10].isdigit())
async def edit_message_handler(query: types.CallbackQuery, state: FSMContext):
    message_id = int(query.data[10:])
    await query.message.answer('üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç\n\n' \
                               '‚ö†Ô∏è –ú–æ–∂–µ—à—å —Ç–∞–∫ –∂–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –ø–æ—Å—Ç ,—è —Å–∞–º –∑–∞–±–µ—Ä—É —Ç–µ–∫—Å—Ç\n\n' \
                               '‚ö†Ô∏è –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å—å(–ø—É—Å—Ç–æ) - –æ—Ç–ø—Ä–∞–≤—å –ª—é–±—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.update_data(message_id=message_id)
    await state.set_state(AdminState.fms_message_text)

@router.message(AdminState.fms_message_text)
async def edit_hello_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('message_id')
    if message.md_text:
        new_text = message.md_text
    else:
        new_text = message.caption
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    hello_text = await cursor.execute('UPDATE msg_kb SET text = ? WHERE id=?', (new_text, message_id,))
    await connect.commit()
    hello_text = await hello_text.fetchone()
    await cursor.close()
    await connect.close()
    await message.answer(f'‚úÖ –¢–µ–∫—Å—Ç {message_id}-–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω\n\n')
    await state.clear()
    msg_data = await call_message_edit(message_id)
    try:
        await message.answer(f'–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ {message_id}-–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        msg_data = await call_message_edit(message_id)
        if msg_data['video'] and msg_data['video'] != 'NONE':
            await message.answer_video(
                video=msg_data['video'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
        elif msg_data['photo'] and msg_data['photo'] != 'NONE':
            await message.answer_photo(
                photo=msg_data['photo'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)

##  –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
@router.callback_query(lambda c: c.data and c.data.startswith('edit_button_') and c.data[12].isdigit())
async def edit_message_handler(query: types.CallbackQuery, state: FSMContext):
    message_id = int(query.data[12:])
    await query.message.answer('üîûüîò –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–ø–∏—Å–æ–∫ URL-–∫–Ω–æ–ø–æ–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µüëá:\n' \
                               '–ö–Ω–æ–ø–∫–∞ 1 - http://example1.com\n'
                               '–ö–Ω–æ–ø–∫–∞ 2 - http://example2.com\n\n'
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.update_data(message_id=message_id)
    await state.set_state(AdminState.fsm_message_button)

@router.message(AdminState.fsm_message_button)
async def process_capcha_buttons(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        message_id = state_data.get('message_id')

        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        button_lines = message.text.strip().split('\n')
        keyboard = []
        
        for line in button_lines:
            line = line.strip()
            if not line:
                continue

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç –∏ URL (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å " - " –∏–ª–∏ " ‚Äî ")
            if ' - ' in line:
                parts = line.split(' - ', 1)
            elif ' ‚Äî ' in line:
                parts = line.split(' ‚Äî ', 1)
            else:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}\n\n" \
                                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - http://example.com")
                return
            
            if len(parts) != 2:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}\n\n" \
                                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - http://example.com")
                return
            
            button_text = parts[0].strip()
            button_url = parts[1].strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            if not button_url.startswith(('http://', 'https://')):
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL: {button_url}\n\n" \
                                    "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.append([types.InlineKeyboardButton(text=button_text, url=button_url)])
        
        if not keyboard:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        reply_markup_json = reply_markup.model_dump_json()

        connect = await aiosqlite.connect('bot.db')
        cursor = await connect.cursor()
        hello_buttom = await cursor.execute('UPDATE msg_kb SET reply_markup = ? WHERE id=?', (reply_markup_json, message_id, ))
        await connect.commit()
        hello_buttom = await hello_buttom.fetchone()
        await cursor.close()
        await connect.close()
        await message.answer(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç–∫–∏ {message_id}-–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞: \n\n")
        await state.clear()
        msg_data = await call_message_edit(message_id)

        try:
            await message.answer(f'–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ {message_id}-–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            if msg_data['video'] and msg_data['video'] != 'NONE':
                await message.answer_video(
                    video=msg_data['video'], 
                    caption=msg_data['text'], 
                    reply_markup=msg_data['reply_markup'], 
                    parse_mode="MarkdownV2"
                )
                await message.answer('‚öôÔ∏è –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–≤–µ—Ç–∫—É', reply_markup=await kb.edit_menu(message_id))
            elif msg_data['photo'] and msg_data['photo'] != 'NONE':
                await message.answer_photo(
                    photo=msg_data['photo'], 
                    caption=msg_data['text'], 
                    reply_markup=msg_data['reply_markup'], 
                    parse_mode="MarkdownV2"
                )
                await message.answer('‚öôÔ∏è –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–≤–µ—Ç–∫—É', reply_markup=await kb.edit_menu(message_id))
        except Exception as e:
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

##  –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data and c.data.startswith('timer_') and c.data[6].isdigit())
async def edit_message_handler(query: types.CallbackQuery, state: FSMContext):
    message_id = int(query.data[6:])
    await query.message.answer('‚è±Ô∏è –û—Ç–ø—Ä–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n\n' \
                               '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ, –æ—Ç—Å—á–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–∂–∞—Ç–∏—è /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.update_data(message_id=message_id)
    await state.set_state(AdminState.fms_message_timer)

@router.message(AdminState.fms_message_timer)
async def process_media_put(message: types.Message, state: FSMContext):
    ##  –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∫–∞–ø—á–∏/–ø—Ä–∏–≤–µ—Ç–∫–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤–≤–æ–¥–∏–º—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    capcha_timer = await get_capcha_timer()
    privetka_timer = await get_privetka_timer()
    timer_values = [item[0] for item in privetka_timer]
    if int(capcha_timer[0]) == int(message.text) or int(message.text) in timer_values:
        await message.answer(f'‚ùå –î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è CAPCHA({capcha_timer[0]}s) –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç–∫–∏({timer_values}s)\n' \
                             'üëÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è')
    else:
        connect = await aiosqlite.connect('bot.db')
        cursor = await connect.cursor()
        data = await state.get_data()
        message_id = data.get('message_id')
        new_timer = message.text
        connect = await aiosqlite.connect('bot.db')
        cursor = await connect.cursor()
        process_timer_put = await cursor.execute('UPDATE msg_kb SET timer = ? WHERE id=?', (new_timer, message_id, ))
        await connect.commit()
        process_timer_put = await process_timer_put.fetchone()
        await cursor.close()
        await connect.close()
        await message.answer(f"‚úÖ –¢–∞–π–º–µ—Ä –¥–ª—è  {message_id}-–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω\n"
                         f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {new_timer} —Å–µ–∫—É–Ω–¥\n\n"
                         '‚öôÔ∏è –ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=await kb.reply_menu())
        await state.clear()
    
##  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–æ–≥–æ –ø–æ—Å—Ç–∞
@router.callback_query(F.data == 'add_message')
async def add_new_message_for_user(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text('üîûüì≥ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ü–µ–ª—ã–π –ø–æ—Å—Ç:\n\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.set_state(AdminState.fsm_new_post)

@router.message(AdminState.fsm_new_post)
async def edit_hello_text(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.reply_markup:
            await message.answer('‚ùå –û—à–∏–±–∫–∞!\n\n' \
                                 '–ü–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É\n\n' \
                                 'üìù –ü—Ä–∏—à–ª–∏ —Ü–µ–ª—ã–π –ø–æ—Å—Ç', reply_markup=kb_button_back_to_privetka)
            return
        reply_markup_json = message.reply_markup.model_dump_json() if message.reply_markup else None
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

    message_data = {
        'text' : message.md_text if message.photo or message.video else None,
        'photo': message.photo[-1].file_id if message.photo else None,
        'video': message.video.file_id if message.video else None,
        'reply_markup': reply_markup_json
    }
    ##  –±–ª–æ–∫ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    current_id = await cursor.execute('SELECT max(id) FROM msg_kb')
    current_id = await cursor.fetchone()
    if current_id is None or current_id[0] is None:
        current_id = 1
    else:
        current_id = int(current_id[0]) + 1
    if message.photo:
        put_photo = await cursor.execute('''
            INSERT INTO msg_kb (id, text, photo, reply_markup)
            VALUES (?, ?, ?, ?)                 
            ''', (current_id, message_data['text'], message_data['photo'], message_data['reply_markup']))
        await connect.commit()
        put_photo = await put_photo.fetchone()
    elif message.video:
        put_photo = await cursor.execute('''
            INSERT INTO msg_kb (id, text, video, reply_markup)
            VALUES (?, ?, ?, ?)                 
            ''', (current_id, message_data['text'], message_data['video'], message_data['reply_markup']))
        await connect.commit()
        put_video = await put_video.fetchone()
    await message.answer('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=await kb.reply_menu())
    await state.clear()