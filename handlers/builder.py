from aiogram import types, F, Router
from aiogram.types import CallbackQuery
import aiosqlite
import json

from functions.db_handler import call_message_edit
import keyboards.admin_message_kb as kb
from state_fsm.fsm import AdminState
from aiogram.fsm.context import FSMContext
from keyboards.admin_kb import button_back_to_privetka

router = Router()

kb_button_back_to_privetka = types.InlineKeyboardMarkup(inline_keyboard=button_back_to_privetka)

@router.callback_query(F.data == 'admin_hello_message')
async def message_git(query: types.CallbackQuery):
    await query.message.edit_text('‚öôÔ∏è –ú–µ–Ω—é –ø—Ä–∏–≤–µ—Ç–∫–∏', reply_markup=await kb.reply_menu())

##  –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data and c.data.startswith('delete_') and c.data[7:].isdigit())
async def delete_message_handler(callback: CallbackQuery):
    try:
        message_id = int(callback.data[7:])  # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "delete_"
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è...
        connect = await aiosqlite.connect('bot.db')
        cursor = await connect.cursor()
        
        await cursor.execute('DELETE FROM msg_kb WHERE id = ?', (message_id,))
        await connect.commit()
        
        await cursor.close()
        await connect.close()
        
        await callback.message.edit_reply_markup(
            reply_markup=await kb.reply_menu()
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", show_alert=True)



## –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data and c.data.startswith('message_') and c.data[8:].isdigit())
async def edit_message_handler(query: types.CallbackQuery):
    try:
        message_id = int(query.data[8:])
        await query.message.answer(f'–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ {message_id}-–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        msg_data = await call_message_edit(message_id)
        if msg_data['video'] and msg_data['video'] != 'NONE':
            await query.message.answer_video(
                video=msg_data['video'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await query.message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
        elif msg_data['photo'] and msg_data['photo'] != 'NONE':
            await query.message.answer_photo(
                photo=msg_data['photo'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await query.message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)

##  –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞
@router.callback_query(lambda c: c.data and c.data.startswith('edit_media_') and c.data[11].isdigit())
async def edit_message_handler(query: types.CallbackQuery, state: FSMContext):
    message_id = int(query.data[11:])
    await query.message.answer('üèûÔ∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ(–≥–∏—Ñ–∫—É)\n\n' \
                               '‚ö†Ô∏è –ú–æ–∂–µ—à—å —Ç–∞–∫ –∂–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –ø–æ—Å—Ç ,—è —Å–∞–º –∑–∞–±–µ—Ä—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª\n\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.update_data(message_id=message_id)
    await state.set_state(AdminState.fms_message_media)

@router.message(AdminState.fms_message_media)
async def process_media_put(message: types.Message, state: FSMContext):
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    data = await state.get_data()
    message_id = data.get('message_id')
    if message.photo:
        photo_id = message.photo[-1].file_id
        put_photo = await cursor.execute('UPDATE msg_kb SET photo = ? WHERE id=?', (photo_id,message_id,))
        clear_video = await cursor.execute('UPDATE msg_kb SET video = "NONE" WHERE id=?', (message_id,))
        await connect.commit()
        put_photo = await put_photo.fetchone()
        clear_video = await clear_video.fetchone()
    elif message.video:
        video_id = message.video.file_id
        put_video = await cursor.execute('UPDATE msg_kb SET video = ? WHERE id=?', (video_id,message_id))
        clear_photo = await cursor.execute('UPDATE msg_kb SET photo = "NONE" WHERE id=?', (message_id,))
        await connect.commit()
        put_photo = await put_video.fetchone()
        clear_photo = await clear_photo.fetchone()
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞!\n\n' \
                             'üèûÔ∏è –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n\n' \
                             '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await cursor.close()
    await connect.close()
    await message.answer(f'‚úÖ –ú–µ–¥–∏–∞ {message_id}-–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ\n\n')
    await state.clear()
    msg_data = await call_message_edit(message_id)
    try:
        await message.answer(f'–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ {message_id}-–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        msg_data = await call_message_edit(message_id)
        if msg_data['video'] and msg_data['video'] != 'NONE':
            await message.answer_video(
                video=msg_data['video'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
        elif msg_data['photo'] and msg_data['photo'] != 'NONE':
            await message.answer_photo(
                photo=msg_data['photo'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)

##  –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
@router.callback_query(lambda c: c.data and c.data.startswith('edit_text_') and c.data[10].isdigit())
async def edit_message_handler(query: types.CallbackQuery, state: FSMContext):
    message_id = int(query.data[10:])
    await query.message.answer('üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç\n\n' \
                               '‚ö†Ô∏è –ú–æ–∂–µ—à—å —Ç–∞–∫ –∂–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –ø–æ—Å—Ç ,—è —Å–∞–º –∑–∞–±–µ—Ä—É —Ç–µ–∫—Å—Ç\n\n' \
                               '‚ö†Ô∏è –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å—å(–ø—É—Å—Ç–æ) - –æ—Ç–ø—Ä–∞–≤—å –ª—é–±—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.update_data(message_id=message_id)
    await state.set_state(AdminState.fms_message_text)

@router.message(AdminState.fms_message_text)
async def edit_hello_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('message_id')
    if message.md_text:
        new_text = message.md_text
    else:
        new_text = message.caption
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    hello_text = await cursor.execute('UPDATE msg_kb SET text = ? WHERE id=?', (new_text, message_id,))
    await connect.commit()
    hello_text = await hello_text.fetchone()
    await cursor.close()
    await connect.close()
    await message.answer(f'‚úÖ –¢–µ–∫—Å—Ç {message_id}-–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω\n\n')
    await state.clear()
    msg_data = await call_message_edit(message_id)
    try:
        await message.answer(f'–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ {message_id}-–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        msg_data = await call_message_edit(message_id)
        if msg_data['video'] and msg_data['video'] != 'NONE':
            await message.answer_video(
                video=msg_data['video'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
        elif msg_data['photo'] and msg_data['photo'] != 'NONE':
            await message.answer_photo(
                photo=msg_data['photo'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)

##  –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda c: c.data and c.data.startswith('edit_button_name_') and c.data[17].isdigit())
async def edit_message_handler(query: types.CallbackQuery, state: FSMContext):
    message_id = int(query.data[17:])
    await query.message.answer('üìç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.update_data(message_id=message_id)
    await state.set_state(AdminState.fsm_message_button_name)

@router.message(AdminState.fsm_message_button_name)
async def process_button_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('message_id')
    if not message.text:
        await message.answer('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!\n\n' \
                             'üìå –ü—Ä–∏—à–ª–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏\n\n' \
                             '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
        return
    new_name_button = message.md_text
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    hello_buttom = await cursor.execute('UPDATE msg_kb SET reply_markup = ? WHERE id=?', (new_name_button, message_id, ))
    await connect.commit()
    hello_buttom = await hello_buttom.fetchone()
    await cursor.close()
    await connect.close()
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ {message_id}-–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: \n\n")
    await state.clear()
    msg_data = await call_message_edit(message_id)
    try:
        await message.answer(f'–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ {message_id}-–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        msg_data = await call_message_edit(message_id)
        if msg_data['video'] and msg_data['video'] != 'NONE':
            await message.answer_video(
                video=msg_data['video'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
        elif msg_data['photo'] and msg_data['photo'] != 'NONE':
            await message.answer_photo(
                photo=msg_data['photo'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)

##  –†–µ–¥–∞–∫—Ç–∏—É–µ–º —Å—Å—ã–ª–∫—É
@router.callback_query(lambda c: c.data and c.data.startswith('edit_url_') and c.data[9].isdigit())
async def edit_message_handler(query: types.CallbackQuery, state: FSMContext):
    message_id = int(query.data[9:])
    await query.message.answer('üîó –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.update_data(message_id=message_id)
    await state.set_state(AdminState.fsm_url_button_name)

@router.message(AdminState.fsm_url_button_name)
async def process_button_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('message_id')
    button_url = message.text.strip()
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://
    if not (button_url.startswith('http://') or button_url.startswith('https://')):
        await message.answer(
        '‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n'
        '–í–≤–µ–¥–∏—Ç–µ URL –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥\n\n'
        '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', 
        reply_markup=kb_button_back_to_privetka
        )
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    procces_button_url = await cursor.execute('UPDATE msg_kb SET url = ? WHERE id=?', (button_url, message_id, ))
    await connect.commit()
    procces_button_url = await procces_button_url.fetchone()
    await cursor.close()
    await connect.close()
    await message.answer(f'‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ {message_id}-–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ')
    await state.clear()
    msg_data = await call_message_edit(message_id)
    try:
        await message.answer(f'–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ {message_id}-–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        msg_data = await call_message_edit(message_id)
        if msg_data['video'] and msg_data['video'] != 'NONE':
            await message.answer_video(
                video=msg_data['video'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
        elif msg_data['photo'] and msg_data['photo'] != 'NONE':
            await message.answer_photo(
                photo=msg_data['photo'], 
                caption=msg_data['text'], 
                reply_markup=msg_data['reply_markup'], 
                parse_mode="MarkdownV2"
            )
            await message.answer('‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.edit_menu(message_id))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)

##  –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data and c.data.startswith('timer_') and c.data[6].isdigit())
async def edit_message_handler(query: types.CallbackQuery, state: FSMContext):
    message_id = int(query.data[6:])
    await query.message.answer('‚è±Ô∏è –û—Ç–ø—Ä–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n\n' \
                               '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ, –æ—Ç—Å—á–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–∂–∞—Ç–∏—è /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.update_data(message_id=message_id)
    await state.set_state(AdminState.fms_message_timer)

@router.message(AdminState.fms_message_timer)
async def process_media_put(message: types.Message, state: FSMContext):
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    data = await state.get_data()
    message_id = data.get('message_id')
    new_timer = message.text
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    process_timer_put = await cursor.execute('UPDATE msg_kb SET timer = ? WHERE id=?', (new_timer, message_id, ))
    await connect.commit()
    process_timer_put = await process_timer_put.fetchone()
    await cursor.close()
    await connect.close()
    await message.answer(f"‚úÖ –¢–∞–π–º–µ—Ä –¥–ª—è  {message_id}-–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω\n"
                         f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {new_timer} —Å–µ–∫—É–Ω–¥\n\n"
                         '‚öôÔ∏è –ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=await kb.reply_menu())
    await state.clear()
    

##  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–æ–≥–æ –ø–æ—Å—Ç–∞
@router.callback_query(F.data == 'add_message')
async def add_new_message_for_user(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text('üì≥ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ü–µ–ª—ã–π –ø–æ—Å—Ç:\n\n' \
                               '–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb_button_back_to_privetka)
    await state.set_state(AdminState.fsm_new_post)

@router.message(AdminState.fsm_new_post)
async def edit_hello_text(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.reply_markup:
            await message.answer('‚ùå –û—à–∏–±–∫–∞!\n\n' \
                                 '–ü–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É\n\n' \
                                 'üìù –ü—Ä–∏—à–ª–∏ —Ü–µ–ª—ã–π –ø–æ—Å—Ç', reply_markup=kb_button_back_to_privetka)
            return
        else:
            markup_data = json.loads(message.reply_markup.model_dump_json())
            text_button = markup_data['inline_keyboard'][0][0]['text']
            url_button = markup_data['inline_keyboard'][0][0]['url']
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

    message_data = {
        'text' : message.md_text if message.photo or message.video else None,
        'photo': message.photo[-1].file_id if message.photo else None,
        'video': message.video.file_id if message.video else None,
        'reply_markup': text_button if message.reply_markup else None,
        'url': url_button if message.reply_markup else None
    }
    # ##  –±–ª–æ–∫ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    connect = await aiosqlite.connect('bot.db')
    cursor = await connect.cursor()
    current_id = await cursor.execute('SELECT max(id) FROM msg_kb')
    current_id = await cursor.fetchone()
    if current_id is None or current_id[0] is None:
        current_id = 1
    else:
        current_id = int(current_id[0]) + 1
    if message.photo:
        put_photo = await cursor.execute('''
            INSERT INTO msg_kb (id, text, photo, reply_markup, url)
            VALUES (?, ?, ?, ?, ?)                 
            ''', (current_id, message_data['text'], message_data['photo'], message_data['reply_markup'], message_data['url']))
        await connect.commit()
        put_photo = await put_photo.fetchone()
        await message.answer('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=await kb.reply_menu())
    elif message.video:
        put_photo = await cursor.execute('''
            INSERT INTO msg_kb (id, text, video, reply_markup, url)
            VALUES (?, ?, ?, ?, ?)                 
            ''', (current_id, message_data['text'], message_data['video'], message_data['reply_markup'], message_data['url']))
        await connect.commit()
        put_video = await put_video.fetchone()
        await message.answer('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=await kb.reply_menu())
    await state.clear()
    